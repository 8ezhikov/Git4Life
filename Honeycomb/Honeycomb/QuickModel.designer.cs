#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Honeycomb
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Crawler DB")]
	public partial class QuickModelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBadLink(BadLink instance);
    partial void UpdateBadLink(BadLink instance);
    partial void DeleteBadLink(BadLink instance);
    partial void InsertSeed(Seed instance);
    partial void UpdateSeed(Seed instance);
    partial void DeleteSeed(Seed instance);
    partial void InsertCrawler_Setting(Crawler_Setting instance);
    partial void UpdateCrawler_Setting(Crawler_Setting instance);
    partial void DeleteCrawler_Setting(Crawler_Setting instance);
    partial void InsertExternalLink(ExternalLink instance);
    partial void UpdateExternalLink(ExternalLink instance);
    partial void DeleteExternalLink(ExternalLink instance);
    partial void InsertInternalLink(InternalLink instance);
    partial void UpdateInternalLink(InternalLink instance);
    partial void DeleteInternalLink(InternalLink instance);
    #endregion
		
		public QuickModelDataContext() : 
				base(global::Honeycomb.Properties.Settings.Default.Crawler_DBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public QuickModelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QuickModelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QuickModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QuickModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<BadLink> BadLinks
		{
			get
			{
				return this.GetTable<BadLink>();
			}
		}
		
		public System.Data.Linq.Table<Seed> Seeds
		{
			get
			{
				return this.GetTable<Seed>();
			}
		}
		
		public System.Data.Linq.Table<Crawler_Setting> Crawler_Settings
		{
			get
			{
				return this.GetTable<Crawler_Setting>();
			}
		}
		
		public System.Data.Linq.Table<ExternalLink> ExternalLinks
		{
			get
			{
				return this.GetTable<ExternalLink>();
			}
		}
		
		public System.Data.Linq.Table<InternalLink> InternalLinks
		{
			get
			{
				return this.GetTable<InternalLink>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BadLinks")]
	public partial class BadLink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LinkId;
		
		private string _LinkPath;
		
		private string _OriginalPageLink;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLinkIdChanging(int value);
    partial void OnLinkIdChanged();
    partial void OnLinkPathChanging(string value);
    partial void OnLinkPathChanged();
    partial void OnOriginalPageLinkChanging(string value);
    partial void OnOriginalPageLinkChanged();
    #endregion
		
		public BadLink()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LinkId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LinkId
		{
			get
			{
				return this._LinkId;
			}
			set
			{
				if ((this._LinkId != value))
				{
					this.OnLinkIdChanging(value);
					this.SendPropertyChanging();
					this._LinkId = value;
					this.SendPropertyChanged("LinkId");
					this.OnLinkIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LinkPath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string LinkPath
		{
			get
			{
				return this._LinkPath;
			}
			set
			{
				if ((this._LinkPath != value))
				{
					this.OnLinkPathChanging(value);
					this.SendPropertyChanging();
					this._LinkPath = value;
					this.SendPropertyChanged("LinkPath");
					this.OnLinkPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginalPageLink", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string OriginalPageLink
		{
			get
			{
				return this._OriginalPageLink;
			}
			set
			{
				if ((this._OriginalPageLink != value))
				{
					this.OnOriginalPageLinkChanging(value);
					this.SendPropertyChanging();
					this._OriginalPageLink = value;
					this.SendPropertyChanged("OriginalPageLink");
					this.OnOriginalPageLinkChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Seeds")]
	public partial class Seed : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SeedIndex;
		
		private string _SeedDomainName;
		
		private string _SeedShortName;
		
		private string _SeedFullName;
		
		private System.Nullable<bool> _IsProcessed;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSeedIndexChanging(int value);
    partial void OnSeedIndexChanged();
    partial void OnSeedDomainNameChanging(string value);
    partial void OnSeedDomainNameChanged();
    partial void OnSeedShortNameChanging(string value);
    partial void OnSeedShortNameChanged();
    partial void OnSeedFullNameChanging(string value);
    partial void OnSeedFullNameChanged();
    partial void OnIsProcessedChanging(System.Nullable<bool> value);
    partial void OnIsProcessedChanged();
    #endregion
		
		public Seed()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeedIndex", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SeedIndex
		{
			get
			{
				return this._SeedIndex;
			}
			set
			{
				if ((this._SeedIndex != value))
				{
					this.OnSeedIndexChanging(value);
					this.SendPropertyChanging();
					this._SeedIndex = value;
					this.SendPropertyChanged("SeedIndex");
					this.OnSeedIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeedDomainName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string SeedDomainName
		{
			get
			{
				return this._SeedDomainName;
			}
			set
			{
				if ((this._SeedDomainName != value))
				{
					this.OnSeedDomainNameChanging(value);
					this.SendPropertyChanging();
					this._SeedDomainName = value;
					this.SendPropertyChanged("SeedDomainName");
					this.OnSeedDomainNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeedShortName", DbType="NVarChar(MAX)")]
		public string SeedShortName
		{
			get
			{
				return this._SeedShortName;
			}
			set
			{
				if ((this._SeedShortName != value))
				{
					this.OnSeedShortNameChanging(value);
					this.SendPropertyChanging();
					this._SeedShortName = value;
					this.SendPropertyChanged("SeedShortName");
					this.OnSeedShortNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeedFullName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string SeedFullName
		{
			get
			{
				return this._SeedFullName;
			}
			set
			{
				if ((this._SeedFullName != value))
				{
					this.OnSeedFullNameChanging(value);
					this.SendPropertyChanging();
					this._SeedFullName = value;
					this.SendPropertyChanged("SeedFullName");
					this.OnSeedFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsProcessed", DbType="Bit")]
		public System.Nullable<bool> IsProcessed
		{
			get
			{
				return this._IsProcessed;
			}
			set
			{
				if ((this._IsProcessed != value))
				{
					this.OnIsProcessedChanging(value);
					this.SendPropertyChanging();
					this._IsProcessed = value;
					this.SendPropertyChanged("IsProcessed");
					this.OnIsProcessedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Crawler Settings]")]
	public partial class Crawler_Setting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PageId;
		
		private int _MaxLevel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPageIdChanging(int value);
    partial void OnPageIdChanged();
    partial void OnMaxLevelChanging(int value);
    partial void OnMaxLevelChanged();
    #endregion
		
		public Crawler_Setting()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PageId
		{
			get
			{
				return this._PageId;
			}
			set
			{
				if ((this._PageId != value))
				{
					this.OnPageIdChanging(value);
					this.SendPropertyChanging();
					this._PageId = value;
					this.SendPropertyChanged("PageId");
					this.OnPageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxLevel", DbType="Int NOT NULL")]
		public int MaxLevel
		{
			get
			{
				return this._MaxLevel;
			}
			set
			{
				if ((this._MaxLevel != value))
				{
					this.OnMaxLevelChanging(value);
					this.SendPropertyChanging();
					this._MaxLevel = value;
					this.SendPropertyChanged("MaxLevel");
					this.OnMaxLevelChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExternalLinks")]
	public partial class ExternalLink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LinkId;
		
		private string _LinkPath;
		
		private string _LinkAnchor;
		
		private string _PageSeedLink;
		
		private string _OriginalPageLink;
		
		private System.Nullable<double> _LinkWeight;
		
		private int _OriginalPageLevel;
		
		private System.Nullable<int> _LinkCount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLinkIdChanging(int value);
    partial void OnLinkIdChanged();
    partial void OnLinkPathChanging(string value);
    partial void OnLinkPathChanged();
    partial void OnLinkAnchorChanging(string value);
    partial void OnLinkAnchorChanged();
    partial void OnPageSeedLinkChanging(string value);
    partial void OnPageSeedLinkChanged();
    partial void OnOriginalPageLinkChanging(string value);
    partial void OnOriginalPageLinkChanged();
    partial void OnLinkWeightChanging(System.Nullable<double> value);
    partial void OnLinkWeightChanged();
    partial void OnOriginalPageLevelChanging(int value);
    partial void OnOriginalPageLevelChanged();
    partial void OnLinkCountChanging(System.Nullable<int> value);
    partial void OnLinkCountChanged();
    #endregion
		
		public ExternalLink()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LinkId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LinkId
		{
			get
			{
				return this._LinkId;
			}
			set
			{
				if ((this._LinkId != value))
				{
					this.OnLinkIdChanging(value);
					this.SendPropertyChanging();
					this._LinkId = value;
					this.SendPropertyChanged("LinkId");
					this.OnLinkIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LinkPath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string LinkPath
		{
			get
			{
				return this._LinkPath;
			}
			set
			{
				if ((this._LinkPath != value))
				{
					this.OnLinkPathChanging(value);
					this.SendPropertyChanging();
					this._LinkPath = value;
					this.SendPropertyChanged("LinkPath");
					this.OnLinkPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LinkAnchor", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string LinkAnchor
		{
			get
			{
				return this._LinkAnchor;
			}
			set
			{
				if ((this._LinkAnchor != value))
				{
					this.OnLinkAnchorChanging(value);
					this.SendPropertyChanging();
					this._LinkAnchor = value;
					this.SendPropertyChanged("LinkAnchor");
					this.OnLinkAnchorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageSeedLink", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PageSeedLink
		{
			get
			{
				return this._PageSeedLink;
			}
			set
			{
				if ((this._PageSeedLink != value))
				{
					this.OnPageSeedLinkChanging(value);
					this.SendPropertyChanging();
					this._PageSeedLink = value;
					this.SendPropertyChanged("PageSeedLink");
					this.OnPageSeedLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginalPageLink", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string OriginalPageLink
		{
			get
			{
				return this._OriginalPageLink;
			}
			set
			{
				if ((this._OriginalPageLink != value))
				{
					this.OnOriginalPageLinkChanging(value);
					this.SendPropertyChanging();
					this._OriginalPageLink = value;
					this.SendPropertyChanged("OriginalPageLink");
					this.OnOriginalPageLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LinkWeight", DbType="Float")]
		public System.Nullable<double> LinkWeight
		{
			get
			{
				return this._LinkWeight;
			}
			set
			{
				if ((this._LinkWeight != value))
				{
					this.OnLinkWeightChanging(value);
					this.SendPropertyChanging();
					this._LinkWeight = value;
					this.SendPropertyChanged("LinkWeight");
					this.OnLinkWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginalPageLevel", DbType="Int NOT NULL")]
		public int OriginalPageLevel
		{
			get
			{
				return this._OriginalPageLevel;
			}
			set
			{
				if ((this._OriginalPageLevel != value))
				{
					this.OnOriginalPageLevelChanging(value);
					this.SendPropertyChanging();
					this._OriginalPageLevel = value;
					this.SendPropertyChanged("OriginalPageLevel");
					this.OnOriginalPageLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LinkCount", DbType="Int")]
		public System.Nullable<int> LinkCount
		{
			get
			{
				return this._LinkCount;
			}
			set
			{
				if ((this._LinkCount != value))
				{
					this.OnLinkCountChanging(value);
					this.SendPropertyChanging();
					this._LinkCount = value;
					this.SendPropertyChanged("LinkCount");
					this.OnLinkCountChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InternalLinks")]
	public partial class InternalLink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PageId;
		
		private int _PageIdSeedSpecific;
		
		private string _PageLink;
		
		private string _PageSeedLink;
		
		private string _OriginalPageLink;
		
		private int _PageLevel;
		
		private System.Nullable<bool> _IsProcessed;
		
		private System.Nullable<bool> _IsAvailable;
		
		private System.Nullable<bool> _IsHtml;
		
		private System.Nullable<int> _LinkCount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPageIdChanging(int value);
    partial void OnPageIdChanged();
    partial void OnPageIdSeedSpecificChanging(int value);
    partial void OnPageIdSeedSpecificChanged();
    partial void OnPageLinkChanging(string value);
    partial void OnPageLinkChanged();
    partial void OnPageSeedLinkChanging(string value);
    partial void OnPageSeedLinkChanged();
    partial void OnOriginalPageLinkChanging(string value);
    partial void OnOriginalPageLinkChanged();
    partial void OnPageLevelChanging(int value);
    partial void OnPageLevelChanged();
    partial void OnIsProcessedChanging(System.Nullable<bool> value);
    partial void OnIsProcessedChanged();
    partial void OnIsAvailableChanging(System.Nullable<bool> value);
    partial void OnIsAvailableChanged();
    partial void OnIsHtmlChanging(System.Nullable<bool> value);
    partial void OnIsHtmlChanged();
    partial void OnLinkCountChanging(System.Nullable<int> value);
    partial void OnLinkCountChanged();
    #endregion
		
		public InternalLink()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PageId
		{
			get
			{
				return this._PageId;
			}
			set
			{
				if ((this._PageId != value))
				{
					this.OnPageIdChanging(value);
					this.SendPropertyChanging();
					this._PageId = value;
					this.SendPropertyChanged("PageId");
					this.OnPageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageIdSeedSpecific", DbType="Int NOT NULL")]
		public int PageIdSeedSpecific
		{
			get
			{
				return this._PageIdSeedSpecific;
			}
			set
			{
				if ((this._PageIdSeedSpecific != value))
				{
					this.OnPageIdSeedSpecificChanging(value);
					this.SendPropertyChanging();
					this._PageIdSeedSpecific = value;
					this.SendPropertyChanged("PageIdSeedSpecific");
					this.OnPageIdSeedSpecificChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageLink", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PageLink
		{
			get
			{
				return this._PageLink;
			}
			set
			{
				if ((this._PageLink != value))
				{
					this.OnPageLinkChanging(value);
					this.SendPropertyChanging();
					this._PageLink = value;
					this.SendPropertyChanged("PageLink");
					this.OnPageLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageSeedLink", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PageSeedLink
		{
			get
			{
				return this._PageSeedLink;
			}
			set
			{
				if ((this._PageSeedLink != value))
				{
					this.OnPageSeedLinkChanging(value);
					this.SendPropertyChanging();
					this._PageSeedLink = value;
					this.SendPropertyChanged("PageSeedLink");
					this.OnPageSeedLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginalPageLink", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string OriginalPageLink
		{
			get
			{
				return this._OriginalPageLink;
			}
			set
			{
				if ((this._OriginalPageLink != value))
				{
					this.OnOriginalPageLinkChanging(value);
					this.SendPropertyChanging();
					this._OriginalPageLink = value;
					this.SendPropertyChanged("OriginalPageLink");
					this.OnOriginalPageLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageLevel", DbType="Int NOT NULL")]
		public int PageLevel
		{
			get
			{
				return this._PageLevel;
			}
			set
			{
				if ((this._PageLevel != value))
				{
					this.OnPageLevelChanging(value);
					this.SendPropertyChanging();
					this._PageLevel = value;
					this.SendPropertyChanged("PageLevel");
					this.OnPageLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsProcessed", DbType="Bit")]
		public System.Nullable<bool> IsProcessed
		{
			get
			{
				return this._IsProcessed;
			}
			set
			{
				if ((this._IsProcessed != value))
				{
					this.OnIsProcessedChanging(value);
					this.SendPropertyChanging();
					this._IsProcessed = value;
					this.SendPropertyChanged("IsProcessed");
					this.OnIsProcessedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAvailable", DbType="Bit")]
		public System.Nullable<bool> IsAvailable
		{
			get
			{
				return this._IsAvailable;
			}
			set
			{
				if ((this._IsAvailable != value))
				{
					this.OnIsAvailableChanging(value);
					this.SendPropertyChanging();
					this._IsAvailable = value;
					this.SendPropertyChanged("IsAvailable");
					this.OnIsAvailableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsHtml", DbType="Bit")]
		public System.Nullable<bool> IsHtml
		{
			get
			{
				return this._IsHtml;
			}
			set
			{
				if ((this._IsHtml != value))
				{
					this.OnIsHtmlChanging(value);
					this.SendPropertyChanging();
					this._IsHtml = value;
					this.SendPropertyChanged("IsHtml");
					this.OnIsHtmlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LinkCount", DbType="Int")]
		public System.Nullable<int> LinkCount
		{
			get
			{
				return this._LinkCount;
			}
			set
			{
				if ((this._LinkCount != value))
				{
					this.OnLinkCountChanging(value);
					this.SendPropertyChanging();
					this._LinkCount = value;
					this.SendPropertyChanged("LinkCount");
					this.OnLinkCountChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
