//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CrawlerClient.CrawlerServer {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClientCrawlerInfo", Namespace="http://schemas.datacontract.org/2004/07/Honeycomb")]
    [System.SerializableAttribute()]
    public partial class ClientCrawlerInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClientNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServerIPField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClientName {
            get {
                return this.ClientNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientNameField, value) != true)) {
                    this.ClientNameField = value;
                    this.RaisePropertyChanged("ClientName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServerIP {
            get {
                return this.ServerIPField;
            }
            set {
                if ((object.ReferenceEquals(this.ServerIPField, value) != true)) {
                    this.ServerIPField = value;
                    this.RaisePropertyChanged("ServerIP");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CrawlerServer.IRemoteCrawler", CallbackContract=typeof(CrawlerClient.CrawlerServer.IRemoteCrawlerCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IRemoteCrawler {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/IRemoteCrawler/ReturnIntermediateResults")]
        void ReturnIntermediateResults(string msg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/IRemoteCrawler/ReturnIntermediateResults")]
        System.Threading.Tasks.Task ReturnIntermediateResultsAsync(string msg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/IRemoteCrawler/ReturnCrawlingResults")]
        void ReturnCrawlingResults(Honeycomb.Shared.CrawlerResultsDTO resultsDto);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/IRemoteCrawler/ReturnCrawlingResults")]
        System.Threading.Tasks.Task ReturnCrawlingResultsAsync(Honeycomb.Shared.CrawlerResultsDTO resultsDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteCrawler/Join", ReplyAction="http://tempuri.org/IRemoteCrawler/JoinResponse")]
        CrawlerClient.CrawlerServer.ClientCrawlerInfo[] Join(CrawlerClient.CrawlerServer.ClientCrawlerInfo clientCrawlerInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteCrawler/Join", ReplyAction="http://tempuri.org/IRemoteCrawler/JoinResponse")]
        System.Threading.Tasks.Task<CrawlerClient.CrawlerServer.ClientCrawlerInfo[]> JoinAsync(CrawlerClient.CrawlerServer.ClientCrawlerInfo clientCrawlerInfo);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, IsInitiating=false, Action="http://tempuri.org/IRemoteCrawler/Leave")]
        void Leave();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, IsInitiating=false, Action="http://tempuri.org/IRemoteCrawler/Leave")]
        System.Threading.Tasks.Task LeaveAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRemoteCrawlerCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteCrawler/Receive")]
        void Receive(CrawlerClient.CrawlerServer.ClientCrawlerInfo sender, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteCrawler/GiveInitialTasks")]
        void GiveInitialTasks(string siteURL);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRemoteCrawlerChannel : CrawlerClient.CrawlerServer.IRemoteCrawler, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RemoteCrawlerClient : System.ServiceModel.DuplexClientBase<CrawlerClient.CrawlerServer.IRemoteCrawler>, CrawlerClient.CrawlerServer.IRemoteCrawler {
        
        public RemoteCrawlerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public RemoteCrawlerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public RemoteCrawlerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public RemoteCrawlerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public RemoteCrawlerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void ReturnIntermediateResults(string msg) {
            base.Channel.ReturnIntermediateResults(msg);
        }
        
        public System.Threading.Tasks.Task ReturnIntermediateResultsAsync(string msg) {
            return base.Channel.ReturnIntermediateResultsAsync(msg);
        }
        
        public void ReturnCrawlingResults(Honeycomb.Shared.CrawlerResultsDTO resultsDto) {
            base.Channel.ReturnCrawlingResults(resultsDto);
        }
        
        public System.Threading.Tasks.Task ReturnCrawlingResultsAsync(Honeycomb.Shared.CrawlerResultsDTO resultsDto) {
            return base.Channel.ReturnCrawlingResultsAsync(resultsDto);
        }
        
        public CrawlerClient.CrawlerServer.ClientCrawlerInfo[] Join(CrawlerClient.CrawlerServer.ClientCrawlerInfo clientCrawlerInfo) {
            return base.Channel.Join(clientCrawlerInfo);
        }
        
        public System.Threading.Tasks.Task<CrawlerClient.CrawlerServer.ClientCrawlerInfo[]> JoinAsync(CrawlerClient.CrawlerServer.ClientCrawlerInfo clientCrawlerInfo) {
            return base.Channel.JoinAsync(clientCrawlerInfo);
        }
        
        public void Leave() {
            base.Channel.Leave();
        }
        
        public System.Threading.Tasks.Task LeaveAsync() {
            return base.Channel.LeaveAsync();
        }
    }
}
